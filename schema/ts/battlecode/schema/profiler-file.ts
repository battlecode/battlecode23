// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ProfilerProfile } from '../../battlecode/schema/profiler-profile';


/**
 * A profiler file is a collection of profiles.
 * When profiling is enabled there is one of these per team per match.
 */
export class ProfilerFile {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ProfilerFile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProfilerFile(bb:flatbuffers.ByteBuffer, obj?:ProfilerFile):ProfilerFile {
  return (obj || new ProfilerFile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProfilerFile(bb:flatbuffers.ByteBuffer, obj?:ProfilerFile):ProfilerFile {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProfilerFile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The method names that are referred to in the events.
 */
frames(index: number):string
frames(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
frames(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

framesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The recorded profiles, one per robot.
 */
profiles(index: number, obj?:ProfilerProfile):ProfilerProfile|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ProfilerProfile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

profilesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startProfilerFile(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFrames(builder:flatbuffers.Builder, framesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, framesOffset, 0);
}

static createFramesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFramesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProfiles(builder:flatbuffers.Builder, profilesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, profilesOffset, 0);
}

static createProfilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProfilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endProfilerFile(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProfilerFile(builder:flatbuffers.Builder, framesOffset:flatbuffers.Offset, profilesOffset:flatbuffers.Offset):flatbuffers.Offset {
  ProfilerFile.startProfilerFile(builder);
  ProfilerFile.addFrames(builder, framesOffset);
  ProfilerFile.addProfiles(builder, profilesOffset);
  return ProfilerFile.endProfilerFile(builder);
}
}
