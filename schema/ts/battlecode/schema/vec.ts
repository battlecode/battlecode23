// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

/**
 * A vector in two-dimensional space. Discrete space, of course.
 * Defaults to the 0 vector.
 */
export class Vec {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Vec {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

x():number {
  return this.bb!.readInt32(this.bb_pos);
}

y():number {
  return this.bb!.readInt32(this.bb_pos + 4);
}

static sizeOf():number {
  return 8;
}

static createVec(builder:flatbuffers.Builder, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
}

}
