// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Constants {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Constants {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConstants(bb:flatbuffers.ByteBuffer, obj?:Constants):Constants {
  return (obj || new Constants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConstants(bb:flatbuffers.ByteBuffer, obj?:Constants):Constants {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Constants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

increasePeriod():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

AdAdditiveIncease():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

MnAdditiveIncease():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startConstants(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addIncreasePeriod(builder:flatbuffers.Builder, increasePeriod:number) {
  builder.addFieldInt32(0, increasePeriod, 0);
}

static addAdAdditiveIncease(builder:flatbuffers.Builder, AdAdditiveIncease:number) {
  builder.addFieldInt32(1, AdAdditiveIncease, 0);
}

static addMnAdditiveIncease(builder:flatbuffers.Builder, MnAdditiveIncease:number) {
  builder.addFieldInt32(2, MnAdditiveIncease, 0);
}

static endConstants(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConstants(builder:flatbuffers.Builder, increasePeriod:number, AdAdditiveIncease:number, MnAdditiveIncease:number):flatbuffers.Offset {
  Constants.startConstants(builder);
  Constants.addIncreasePeriod(builder, increasePeriod);
  Constants.addAdAdditiveIncease(builder, AdAdditiveIncease);
  Constants.addMnAdditiveIncease(builder, MnAdditiveIncease);
  return Constants.endConstants(builder);
}
}
